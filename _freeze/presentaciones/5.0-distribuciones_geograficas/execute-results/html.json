{
  "hash": "888a03a856381d1695ef4a948067ce31",
  "result": {
    "markdown": "---\ntitle: \"Distribuciones\"\nauthor: Fabricio Villalobos & Juliana Herrera-Pérez\nformat: revealjs\n---\n\n\n\n## Puntos, polígonos y mapas de distribución\n\n> \"...el espacio donde las condiciones ecológicas favorecen, real o potencialmente y en varios niveles, las interacciones no efímeras de los individuos de una especie\" Mota-Vargas & Rojas-Soto 2012\n\n## \n\n-   Los registros (colectas georeferenciadas) de las especies son los datos primarios de biodiversidad, a partir de los cuáles podemos estimar las áreas de distribución de estas y describir/evaluar los patrones de diversidad que emergen de su agregación (traslape; e.g., gradiente geográfico de riqueza)\n-   En este ejemplo/ejercicio veremos cómo obtener dichos registros directamente desde R\n-   También, veremos cómo generar áreas de distribución (extenciones de presencia) a partir de estos registros, creando polígonos de diferentes tipos (mínimo, alpha y alpha dinámico)\n\nLos datos de registros serán obtenidos de la plataforma en línea [Global Biodiversity Information Facility - GBIF](https://www.gbif.org/)\n\n## Paquetes necesarios:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rgbif)\nlibrary(dplyr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'dplyr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLinking to GEOS 3.10.2, GDAL 3.4.3, PROJ 8.2.0; sf_use_s2() is TRUE\n```\n:::\n\n```{.r .cell-code}\nlibrary(here)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nhere() starts at /home/luisd/Dropbox/darcyDB/PDRF/curso-R-biodiversidad\n```\n:::\n\n```{.r .cell-code}\nlibrary(rnaturalearth)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nThe legacy packages maptools, rgdal, and rgeos, underpinning this package\nwill retire shortly. Please refer to R-spatial evolution reports on\nhttps://r-spatial.org/r/2023/05/15/evolution4.html for details.\nThis package is now running under evolution status 0 \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nSupport for Spatial objects (`sp`) will be deprecated in {rnaturalearth} and will be removed in a future release of the package. Please use `sf` objects with {rnaturalearth}. For example: `ne_download(returnclass = 'sf')`\n```\n:::\n\n```{.r .cell-code}\nlibrary(terra)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nterra 1.7.29\n```\n:::\n\n```{.r .cell-code}\nlibrary(alphahull)\nlibrary(rangeBuilder)\n```\n:::\n\n\n\n# Obteniendo registros de presencia de GBIF\n\n## \n\nEscoger una especie y aplicar la función `occ_data`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_1 <- occ_data(scientificName = \"Musonycteris harrisoni\", limit = 500)\n```\n:::\n\n\n\n. . .\n\nEl objeto sp_1 es una lista con datos sobre los resultados obtenidos en GBIF (incluyendo algunos metadatos), para trabajar únicamente con la tabla de registros hay que seleccionar el objeto data dentro del mismo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_1 <- sp_1$data\n```\n:::\n\n\n\n##\n\nChecar el nombre de las columnas (para después buscar únicamente las de posición geográfica: lat/long)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(sp_1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  [1] \"key\"                                      \n  [2] \"scientificName\"                           \n  [3] \"decimalLatitude\"                          \n  [4] \"decimalLongitude\"                         \n  [5] \"issues\"                                   \n  [6] \"datasetKey\"                               \n  [7] \"publishingOrgKey\"                         \n  [8] \"installationKey\"                          \n  [9] \"hostingOrganizationKey\"                   \n [10] \"publishingCountry\"                        \n [11] \"protocol\"                                 \n [12] \"lastCrawled\"                              \n [13] \"lastParsed\"                               \n [14] \"crawlId\"                                  \n [15] \"projectId\"                                \n [16] \"basisOfRecord\"                            \n [17] \"individualCount\"                          \n [18] \"occurrenceStatus\"                         \n [19] \"sex\"                                      \n [20] \"taxonKey\"                                 \n [21] \"kingdomKey\"                               \n [22] \"phylumKey\"                                \n [23] \"classKey\"                                 \n [24] \"orderKey\"                                 \n [25] \"familyKey\"                                \n [26] \"genusKey\"                                 \n [27] \"speciesKey\"                               \n [28] \"acceptedTaxonKey\"                         \n [29] \"acceptedScientificName\"                   \n [30] \"kingdom\"                                  \n [31] \"phylum\"                                   \n [32] \"order\"                                    \n [33] \"family\"                                   \n [34] \"genus\"                                    \n [35] \"species\"                                  \n [36] \"genericName\"                              \n [37] \"specificEpithet\"                          \n [38] \"taxonRank\"                                \n [39] \"taxonomicStatus\"                          \n [40] \"iucnRedListCategory\"                      \n [41] \"elevation\"                                \n [42] \"elevationAccuracy\"                        \n [43] \"depth\"                                    \n [44] \"depthAccuracy\"                            \n [45] \"continent\"                                \n [46] \"stateProvince\"                            \n [47] \"year\"                                     \n [48] \"month\"                                    \n [49] \"day\"                                      \n [50] \"eventDate\"                                \n [51] \"modified\"                                 \n [52] \"lastInterpreted\"                          \n [53] \"license\"                                  \n [54] \"isInCluster\"                              \n [55] \"datasetID\"                                \n [56] \"datasetName\"                              \n [57] \"recordedBy\"                               \n [58] \"identifiedBy\"                             \n [59] \"preparations\"                             \n [60] \"geodeticDatum\"                            \n [61] \"class\"                                    \n [62] \"countryCode\"                              \n [63] \"country\"                                  \n [64] \"rightsHolder\"                             \n [65] \"institutionID\"                            \n [66] \"dynamicProperties\"                        \n [67] \"county\"                                   \n [68] \"namePublishedInYear\"                      \n [69] \"fieldNumber\"                              \n [70] \"language\"                                 \n [71] \"gbifID\"                                   \n [72] \"type\"                                     \n [73] \"taxonID\"                                  \n [74] \"catalogNumber\"                            \n [75] \"vernacularName\"                           \n [76] \"institutionCode\"                          \n [77] \"nameAccordingTo\"                          \n [78] \"identifier\"                               \n [79] \"acceptedNameUsage\"                        \n [80] \"verbatimCoordinateSystem\"                 \n [81] \"locality\"                                 \n [82] \"collectionCode\"                           \n [83] \"occurrenceID\"                             \n [84] \"locationID\"                               \n [85] \"startDayOfYear\"                           \n [86] \"ownerInstitutionCode\"                     \n [87] \"bibliographicCitation\"                    \n [88] \"collectionID\"                             \n [89] \"higherClassification\"                     \n [90] \"identificationID\"                         \n [91] \"parentNameUsage\"                          \n [92] \"lifeStage\"                                \n [93] \"samplingProtocol\"                         \n [94] \"dateIdentified\"                           \n [95] \"coordinateUncertaintyInMeters\"            \n [96] \"references\"                               \n [97] \"http://unknown.org/nick\"                  \n [98] \"verbatimEventDate\"                        \n [99] \"verbatimLocality\"                         \n[100] \"http://unknown.org/captive\"               \n[101] \"eventTime\"                                \n[102] \"networkKeys\"                              \n[103] \"institutionKey\"                           \n[104] \"collectionKey\"                            \n[105] \"recordNumber\"                             \n[106] \"georeferenceProtocol\"                     \n[107] \"georeferenceVerificationStatus\"           \n[108] \"disposition\"                              \n[109] \"fieldNotes\"                               \n[110] \"verbatimElevation\"                        \n[111] \"reproductiveCondition\"                    \n[112] \"namePublishedIn\"                          \n[113] \"georeferenceSources\"                      \n[114] \"establishmentMeans\"                       \n[115] \"nomenclaturalCode\"                        \n[116] \"higherGeography\"                          \n[117] \"georeferencedBy\"                          \n[118] \"endDayOfYear\"                             \n[119] \"occurrenceRemarks\"                        \n[120] \"accessRights\"                             \n[121] \"habitat\"                                  \n[122] \"georeferencedDate\"                        \n[123] \"georeferenceRemarks\"                      \n[124] \"otherCatalogNumbers\"                      \n[125] \"identificationVerificationStatus\"         \n[126] \"locationAccordingTo\"                      \n[127] \"identificationRemarks\"                    \n[128] \"organismID\"                               \n[129] \"previousIdentifications\"                  \n[130] \"identificationQualifier\"                  \n[131] \"typeStatus\"                               \n[132] \"http://unknown.org/combinationAuthors\"    \n[133] \"http://unknown.org/verbatimScientificName\"\n[134] \"http://unknown.org/canonicalName\"         \n[135] \"verbatimLabel\"                            \n[136] \"http://unknown.org/combinationYear\"       \n[137] \"canonicalName\"                            \n[138] \"taxonConceptID\"                           \n[139] \"associatedSequences\"                      \n[140] \"associatedReferences\"                     \n[141] \"name\"                                     \n```\n:::\n:::\n\n\n\n## \n\nCrear otro objeto a partir del anterior para quedarse únicamente con long/lat\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_points <- select(sp_1,decimalLongitude,decimalLatitude)\n```\n:::\n\n\n\n. . .\n\nNOTA: el nombre de la variable puede ser diferente (.e.g \"LATITUDE\", \"Latidude\", \"lat\", etc. Siempre hay que checar antes)\n\n. . .\n\nQuedarse únicamente con los puntos/registros individuales (i.e., excluir duplicados)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_points_unique <- unique(sp1_points)\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(sp1_points)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 200   2\n```\n:::\n\n```{.r .cell-code}\ndim(sp1_points_unique)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 79  2\n```\n:::\n:::\n\n\n\n## \n\nGraficar (poner en un mapa) esos puntos de presencia de nuestra especie\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(sp1_points)+\n  geom_point(aes(decimalLongitude,decimalLatitude),\n             col=\"blue\",pch=19)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 57 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n\n## \n\nAgregar el mapa del mundo para saber qué onda!\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrld <- ne_countries(scale = \"small\",returnclass = \"sf\")\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_sf(data=wrld)+\n  geom_point(data=sp1_points,aes(decimalLongitude,decimalLatitude),\n             col=\"blue\",pch=19,size=1)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Removed 57 rows containing missing values (`geom_point()`).\n```\n:::\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n## \n\nHay algo claramente equivocado, ¿cierto? Los puntos/registros necesitan ser \"curados\" (limpiados)\n\n. . .\n\nEliminar los puntos con mala georeferencia (en este caso, puntos obvios en el \"viejo mundo\")+ manteniendo cada set de datos en cada paso (para poder ir atrás en caso de dudas)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_points2 <- filter(sp1_points_unique, decimalLatitude > 0.5)\nsp1_points3 <- filter(sp1_points2, decimalLatitude < 22)\nsp1_points4 <- filter(sp1_points3, decimalLongitude > -105.56611)\n```\n:::\n\n\n\n## \n\nAhora sí, mapeamos de nuevo pero sólamente en la región de interés (México)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmex_map <- filter(wrld,name==\"Mexico\")\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_sf(data=mex_map)+\n  geom_point(data=sp1_points4,aes(decimalLongitude,decimalLatitude),\n             col=\"blue\",pch=19,size=1)\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n# Polígono convexo mínimo\n\n## \n\nPrimero, necesitamos convertir los puntos a un `spat_vector` de `terra`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_spatVect <- vect(sp1_points4, geom=c(\"decimalLongitude\", \"decimalLatitude\"), crs=\"epsg:4326\", keepgeom=FALSE)\n```\n:::\n\n\n\n. . .\n\nAhora sí, creamos el PCM\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_mcp <- terra::convHull(sp1_spatVect)\n```\n:::\n\n\n\n## \n\n¿Cómo se ve?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_mcp2 <- st_as_sf(sp1_mcp)\n\n\nggplot()+\n  geom_sf(data=mex_map)+\n  geom_sf(data=sp1_mcp2,\n             fill=\"blue\")\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n# Polígono alfa (alpha hull)\n\n## \n\nUsamos el paquete `alphahull`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_alphahull <- ahull(sp1_points4, alpha = 6)\n```\n:::\n\n\n\n. . .\n\n*Error: shull: duplicate points found*\n\n. . .\n\nFalla porque encuentra puntos duplicados o, como en este caso, puntos en una línea recta (i.e, mismo X y/o mismo Y).\n\n. . .\n\nIdentificar los duplicados en long y lat\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_dupLong <- which(duplicated(sp1_points4[,1]))\nsp1_dupLat <- which(duplicated(sp1_points4[,2]))\n#Juntar los IDs de los duplicados en cada columna\nsp1_dups <- c(sp1_dupLong,sp1_dupLat)\n```\n:::\n\n\n\n##\n\nGenerar un nuevo set de datos (para no sobreescribir el anterior)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#Crear otro objeto, siempre es mejor para no alterar los datos originales\nsp1_points5 <- sp1_points4\n#Sumarle una cantidad pequeña y aleatoria a los valores originales\nsp1_points5[sp1_dups,] <- sp1_points5[sp1_dups,] + matrix(rnorm(length(sp1_dups)*2, mean = 0, sd = 0.0001),ncol = 2)\n```\n:::\n\n\n\n## \n\nCrear el Alpha Hull con un valor de alpha escogido (por la razón que crean relevante)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_alphahull <- ahull(sp1_points5, alpha = 1)\n```\n:::\n\n\n\n. . .\n\nPara calcular el alpha hull, necesitamos que el objeto sea de tipo espacial del paquete `sf`. Para eso usaremos una función independiente, disponible en su carpeta de trabajo\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(file = here(\"data\",\"ah2sf.R\"))\n\nsp1_alphahull.poly <- ah2sf(sp1_alphahull)\n```\n:::\n\n\n\n## \n\n¿Cómo se ve?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot()+\n  geom_sf(data=mex_map)+\n  geom_sf(data=sp1_alphahull.poly,\n          fill=\"blue\")\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n# Polífgono alfa dinámico\n\n## \n\nUsamos el paquete `rangeBuilder`, el cual crea un polígono alpha hull con un valor de alpha \"óptimo\" basado en la distribución espacial de los puntos\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp_range <- getDynamicAlphaHull(\n  sp1_points5, #Tabla de puntos/registros de la especie\n  coordHeaders = c(\"decimalLongitude\", \"decimalLatitude\"),# x y y\n  fraction = 0.95,   # la fracción mínima de registros que debe incluir el polígono\n  partCount = 2,  #\tel máximo de polígonos disyuntos permitidos\n  initialAlpha = 1, # Alpha inicial\n  alphaIncrement = 0.5,\n  alphaCap = 1000,\n  clipToCoast = \"terrestrial\"  # solo la parte terrestre del polígono se mantendrá (se cortan las partes no-terrestres/acuáticas con base en un mapa descargado de naturalearth).\n)\n```\n:::\n\n\n\n## \n\nGuardamos el valor de `alpha` obtenido\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha <- sp_range[[2]] # salvar el valor de alfa óptimo encontrado\n```\n:::\n\n\n\n. . .\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalpha\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"alpha1.5\"\n```\n:::\n:::\n\n\n\n. . .\n\nConvertir el polígono alpha a un objeto sf\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsp1_dynalpha <- st_make_valid(st_as_sf(sp_range[[1]]))\n```\n:::\n\n\n\n## \n\n¿Cómo se ve ese polígono?\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_sf(data=mex_map)+ \n  geom_sf(data=sp1_dynalpha,fill = 'blue')\n```\n\n::: {.cell-output-display}\n![](5.0-distribuciones_geograficas_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n## \n\nFinalmente, podemos salvar esos polígonos como `shapefiles`, para usarlos en otros software (e.g. ArcGIS) y eventualmente juntar los de varias especies para otros análisis (ejercicio siguiente)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_write(sp1_mcp2, \"sp1_min_convex.shp\")\nst_write(sp1_alphahull.poly, \"sp1_alphahull.shp\")\nst_write(sp1_dynalpha, \"sp1_dyn_alphahull.shp\")\n```\n:::\n",
    "supporting": [
      "5.0-distribuciones_geograficas_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}