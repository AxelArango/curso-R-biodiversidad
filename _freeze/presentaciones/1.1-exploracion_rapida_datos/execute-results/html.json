{
  "hash": "e1465723f8f4c8606c982dedbaff6014",
  "result": {
    "markdown": "---\ntitle: \"Exploración rápida de datos\"\nauthor: \"Gabriel Massaine Moulatlet\"\ninstitute: Instituto de Ecología, A.C.\nformat: \n  revealjs:\n    slide-number: true\n    embed-resources: true\neditor: visual\nhighlight-style: arrow-light\n---\n\n::: {.cell}\n\n:::\n\n\n# Exploración de datos\n\n## \n\n-   Buscar información general sobre los datos\n-   Con *Big Data* es poco probable lograr visualizar toda la información en las matrices\n-   Identificar problemas de forma y contenido\n\n## Paquetes\n\nVamos a utilizar los siguientes paquetes en R\n\n-   `skimR`\n-   `janitor`\n-   `report`\n\n![](imgs/figlogos.png)\n\n------------------------------------------------------------------------\n\n> \"Los científicos de datos dedican entre el 50 % y el 80 % de su tiempo a este labor más mundano de recopilar y preparar datos digitales rebeldes, antes de que puedan explorarse en busca de pepitas útiles.\" - Internet (2023)\n\n![](imgs/meme_data.jpg){fig-align=\"center\"}\n\n## Pasos para la exploración de datos\n\n-   El primer paso es importar los datos en R.\n-   Antes de analizar los datos, hay que prepararlos y limpiarlos\n-   Luego, explorar los datos de manera rápida y eficiente para saber si:\n    1)  Fueron importados correctamente\n    2)  Resumir características de los datos\n\n## En R\n\n-   R identifica de manera automática las diferencias entre los tipos de información\n-   Números, caracteres, espacios, factores...\n-   Por eso la importancia de visualizar rápidamente los posibles problemas\n\n# Funciones de visualización de datos\n\n## skimR\n\n::: columns\n::: {.column width=\"40%\"}\n![](imgs/skimr.png)\n:::\n\n::: {.column width=\"60%\"}\n-   Es un paquete de básicamente una única función `skim()`\n-   La función `skim()` es útil para resumir conjuntos de datos\n-   Es un combo de algunas funciones de R base, como `str()`, `class()`, `summary()`\n-   Documentación [aquí](https://cran.r-project.org/web/packages/skimr/vignettes/skimr.html) y [aquí](https://docs.ropensci.org/skimr/articles/extending_skimr.html)\n:::\n:::\n\n## \n\nVamos a aplicar la función `summary()` sobre nuestro conjunto de datos *df*\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(nacionalidad = c(\"ARG\",\"NOR\",\"FRA\",\"ARG\",\"ARG\",\"ARG\",\"ARG\"),\n                 jugadores = c('Messi', 'Haaland', 'Benzema', 'Alvarez', 'Lautaro',\n                               'DiMaria','Maradona'),\n                 goles = c(12, 30, 30, 12, 12,30, NA),\n                 partidos = c(15, 20, 20, 20, 18,20, NA))\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n nacionalidad        jugadores             goles       partidos    \n Length:7           Length:7           Min.   :12   Min.   :15.00  \n Class :character   Class :character   1st Qu.:12   1st Qu.:18.50  \n Mode  :character   Mode  :character   Median :21   Median :20.00  \n                                       Mean   :21   Mean   :18.83  \n                                       3rd Qu.:30   3rd Qu.:20.00  \n                                       Max.   :30   Max.   :20.00  \n                                       NA's   :1    NA's   :1      \n```\n:::\n:::\n\n\n## Ahora vamos aplicar la función `skim()` sobre un conjunto de datos *df*\n\n-   Me ayudan con la interpretación\n\n\n::: {.cell skimr_include_summary='false'}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(skimr)\n\ndf%>%\n  skim()\n```\n:::\n\n\n## \n\n![](imgs/skimout.jpg)\n\n## Separando los elementos\n\n-   la función `yank()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(skimr)\n\ndf%>%\n  skim()%>%\n  yank(\"numeric\")\n```\n\n::: {.cell-output-display}\n**Variable type: numeric**\n\n|skim_variable | n_missing| complete_rate|  mean|   sd| p0|  p25| p50| p75| p100|hist  |\n|:-------------|---------:|-------------:|-----:|----:|--:|----:|---:|---:|----:|:-----|\n|goles         |         1|          0.86| 21.00| 9.86| 12| 12.0|  21|  30|   30|▇▁▁▁▇ |\n|partidos      |         1|          0.86| 18.83| 2.04| 15| 18.5|  20|  20|   20|▂▁▂▁▇ |\n:::\n:::\n\n\n## Conjuntos de datos muy grandes\n\n-   Estos son datos de mi posdoc, de interacción (binarias: 0s o 1s) aves-plantas\n-   Son más de 140 mil filas...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\nbirds = import(file = here(\"dados\",\"birds.csv\"))\n```\n:::\n\n\n## QUIZ:\n\n-   Use la función `skim()` y conteste:\n-   ¿Cuál el número de especies plantas y de aves?\n-   ¿Hay datos faltantes?\n-   ¿Hay datos raros en las interaciones?\n\n## Vamos a identificar los NAs\n\n-   ¿Alguién sugiere alguna manera de hacer eso?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyr)\n\nbirds%>%\n  filter(is.na(birds))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  birds               plants interaction\n1  <NA> Canthium oligocarpum           0\n```\n:::\n:::\n\n\n## ¿En cuál fila están los valores faltantes?\n\n-   ¿Sugerencias de cómo hacerlo?\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwhich(birds$birds==\"\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 140748 140749 140750\n```\n:::\n:::\n\n\n## Funciónes adicionales: `dplyr::glimpse()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\ndf%>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 7\nColumns: 4\n$ nacionalidad <chr> \"ARG\", \"NOR\", \"FRA\", \"ARG\", \"ARG\", \"ARG\", \"ARG\"\n$ jugadores    <chr> \"Messi\", \"Haaland\", \"Benzema\", \"Alvarez\", \"Lautaro\", \"DiM…\n$ goles        <dbl> 12, 30, 30, 12, 12, 30, NA\n$ partidos     <dbl> 15, 20, 20, 20, 18, 20, NA\n```\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\n\nbirds%>%\n  glimpse()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 140,750\nColumns: 3\n$ birds       <chr> \"Aburria aburri\", \"Aburria aburri\", \"Aburria aburri\", \"Abu…\n$ plants      <chr> \"Alchornea grandiflora\", \"Asteraceae sp\", \"Bellusia pentam…\n$ interaction <int> 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0…\n```\n:::\n:::\n\n\n## `easystats::report()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(easystats)\n\ndf%>%\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe data contains 7 observations of the following 4 variables:\n\n  - nacionalidad: 3 entries, such as ARG (n = 5); FRA (n = 1); NOR (n = 1) (0\nmissing)\n  - jugadores: 7 entries, such as Alvarez (n = 1); Benzema (n = 1); DiMaria (n =\n1) and 4 others (0 missing)\n  - goles: n = 7, Mean = 21.00, SD = 9.86, Median = , MAD = 13.34, range: [12,\n30], Skewness = 0.00, Kurtosis = -3.33, 1 missing\n  - partidos: n = 7, Mean = 18.83, SD = 2.04, Median = , MAD = 0.00, range: [15,\n20], Skewness = -1.78, Kurtosis = 2.77, 1 missing\n```\n:::\n:::\n\n\n## \n\n-   ¿Qué otra información les pareció relevant de la función `report`?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(easystats)\n\nbirds%>%\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThe data contains 140750 observations of the following 3 variables:\n\n  - birds: 1265 entries, such as Turdus rufiventris (0.80%); Turdus merula\n(0.80%); Vireo olivaceus (0.76%) and 1262 others (1 missing)\n  - plants: 2902 entries, such as Trema micrantha (0.51%); Sorbus aucuparia\n(0.50%); Myrsine coriacea (0.49%) and 2899 others (0 missing)\n  - interaction: n = 140750, Mean = 0.18, SD = 0.39, Median = 0.00, MAD = 0.00,\nrange: [0, 5], Skewness = 1.64, Kurtosis = 0.83, 0% missing\n```\n:::\n:::\n\n\n## \n\n-   La función report es extramadamente útil cuando aplicada a modelos estadísticos, pero sirve para visualizaciones también\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nmodel <- lm(Sepal.Length ~ Species, data = iris)\nreport(model)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWe fitted a linear model (estimated using OLS) to predict Sepal.Length with\nSpecies (formula: Sepal.Length ~ Species). The model explains a statistically\nsignificant and substantial proportion of variance (R2 = 0.62, F(2, 147) =\n119.26, p < .001, adj. R2 = 0.61). The model's intercept, corresponding to\nSpecies = setosa, is at 5.01 (95% CI [4.86, 5.15], t(147) = 68.76, p < .001).\nWithin this model:\n\n  - The effect of Species [versicolor] is statistically significant and positive\n(beta = 0.93, 95% CI [0.73, 1.13], t(147) = 9.03, p < .001; Std. beta = 1.12,\n95% CI [0.88, 1.37])\n  - The effect of Species [virginica] is statistically significant and positive\n(beta = 1.58, 95% CI [1.38, 1.79], t(147) = 15.37, p < .001; Std. beta = 1.91,\n95% CI [1.66, 2.16])\n\nStandardized parameters were obtained by fitting the model on a standardized\nversion of the dataset. 95% Confidence Intervals (CIs) and p-values were\ncomputed using a Wald t-distribution approximation.\n```\n:::\n:::\n\n\n# Extraer información de los datos\n\n## Janitor\n\n::: columns\n::: {.column width=\"20%\"}\n![](imgs//janitor.png)\n:::\n\n::: {.column width=\"80%\"}\n-   Paquete con dos tipos de funciones\n    -   Limpieza de datos (vamos ver en la siguiente clase)\n    -   Preparación de tablas de conteos (contingencia)\n    -   [Documentación](https://sfirke.github.io/janitor/articles/janitor.html)\n:::\n:::\n\n## Uso de la función *table()* del R base\n\nEsta función sirve para generar tablas de contingencia, o sea, con frecuencias, proporciones o conteos entre los objetos\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# vamos usar nuestro df\ndf <- data.frame(nacionalidad = c(\"ARG\",\"NOR\",\"FRA\",\"ARG\",\"ARG\",\"ARG\",\"ARG\"),\n                 jugadores = c('Messi', 'Haaland', 'Benzema', 'Alvarez', 'Lautaro',\n                               'DiMaria','Maradona'),\n                 goles = c(12, 30, 30, 12, 12,30, NA),\n                 partidos = c(15, 20, 20, 20, 18,20, NA))\n```\n:::\n\n\n## Vamos a probar algunas de sus habilidades en R...\n\n-   Usando la función `table()`:\n    -   Cuantos tipos de \"goles\" hay?\n    -   Cuantos goles cada jugador ha hecho?\n\n## ¿Cuantos tipos de \"goles\" hay?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$goles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n12 30 \n 3  3 \n```\n:::\n:::\n\n\n## ¿Cuántos goles ha hecho cada jugador?\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Cruzar la información \"jugadores\" y \"goles\"\ntable(df$jugadores,df$goles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          \n           12 30\n  Alvarez   1  0\n  Benzema   0  1\n  DiMaria   0  1\n  Haaland   0  1\n  Lautaro   1  0\n  Maradona  0  0\n  Messi     1  0\n```\n:::\n:::\n\n\n## La función `table()` permite calcular proporciones\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprop.table(table(df$jugadores,df$goles))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          \n                  12        30\n  Alvarez  0.1666667 0.0000000\n  Benzema  0.0000000 0.1666667\n  DiMaria  0.0000000 0.1666667\n  Haaland  0.0000000 0.1666667\n  Lautaro  0.1666667 0.0000000\n  Maradona 0.0000000 0.0000000\n  Messi    0.1666667 0.0000000\n```\n:::\n:::\n\n\n## Desventajas de usar la función table()\n\n-   El output no es un data.frame\n-   No funciona bien con los pipes (%\\>%)\n-   Los resultados son complicados de extraer y formatear . . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntab <- table(df$jugadores,df$goles)\nclass(tab)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"table\"\n```\n:::\n:::\n\n\n## Uso de la función `janitor::tabyl()`\n\n-   Usa la estructura tidyverse\n-   El output nos da informaciones más relevantes\n-   Es más fácil de trabajar que la función `table()`\n\n## La función `janitor::tabyl()`\n\n::: columns\n::: {.column width=\"50%\"}\n-   Con \\`tabyl()´\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(janitor)\n\n# Tablas con una variable\ndf %>%\n  tabyl(jugadores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n jugadores n   percent\n   Alvarez 1 0.1428571\n   Benzema 1 0.1428571\n   DiMaria 1 0.1428571\n   Haaland 1 0.1428571\n   Lautaro 1 0.1428571\n  Maradona 1 0.1428571\n     Messi 1 0.1428571\n```\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n-   Con `table()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Tablas con una variable - comparar con la función `table()`\n  table(df$jugadores)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Alvarez  Benzema  DiMaria  Haaland  Lautaro Maradona    Messi \n       1        1        1        1        1        1        1 \n```\n:::\n:::\n\n:::\n:::\n\n## Tablas con NA\n\n-   La función `tabyl()`te indica la presencia de NAs, mientras que `table()` no lo hace por defecto\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  tabyl(goles)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n goles n   percent valid_percent\n    12 3 0.4285714           0.5\n    30 3 0.4285714           0.5\n    NA 1 0.1428571            NA\n```\n:::\n:::\n\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(df$goles, useNA = \"always\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  12   30 <NA> \n   3    3    1 \n```\n:::\n:::\n\n\n## QUIZ:\n\n-   Use la función `tabyl()` para saber cuál es la especie de ave con más occurrencias\n-   TIP: para visualizar, miren la función `View()` o la función `arrange()`\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbirds %>%\n  tabyl(birds)%>%\n  arrange(desc(n))%>%\n  head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                birds    n     percent valid_percent\n   Turdus rufiventris 1120 0.007957371   0.007957428\n        Turdus merula 1119 0.007950266   0.007950323\n      Vireo olivaceus 1070 0.007602131   0.007602185\n      Thraupis sayaca 1021 0.007253996   0.007254048\n Pitangus sulphuratus  997 0.007083481   0.007083532\n    Turdus albicollis  996 0.007076377   0.007076427\n```\n:::\n:::\n\n\n## Algunas funciones derivadas útiles\n\n-   `adorn_totals()`\n-   `adorn_percentages()`\n-   `adorn_rounding(digits=1)`\n\n## `adorn_totals()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  filter(nacionalidad == \"ARG\") %>%\n  tabyl(goles) %>%\n  adorn_totals()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n goles n percent valid_percent\n    12 3     0.6          0.75\n    30 1     0.2          0.25\n  <NA> 1     0.2            NA\n Total 5     1.0          1.00\n```\n:::\n:::\n\n\n## Tablas con dos variables\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  filter(nacionalidad == \"ARG\") %>%\n  tabyl(goles,partidos) %>%\n  adorn_percentages()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n goles        15        18        20 NA_\n    12 0.3333333 0.3333333 0.3333333   0\n    30 0.0000000 0.0000000 1.0000000   0\n    NA 0.0000000 0.0000000 0.0000000   1\n```\n:::\n:::\n\n\n## QUIZ\n\n> Al usar la función `adorn_percentages()`, qué porcentajes se están calculando? Hay un argumento llamado *denominator = c(\"all\", \"row\", \"col\")* en la función `adorn_percentages()`. Cuál es la diferencia en usar cada una de las opciones?\n\n## No confundir:\n\n-   `adorn_percentages()` - calcular porcentajes\n-   `adorn_pct_formatting()` - formatar los valores calculados\n-   ambas funciones pueden ser usadas una trás otra\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  filter(nacionalidad == \"ARG\") %>%\n  tabyl(goles,partidos) %>%\n  adorn_percentages() %>%\n  adorn_pct_formatting() # Colocar los Ns en el output\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n goles    15    18     20    NA_\n    12 33.3% 33.3%  33.3%   0.0%\n    30  0.0%  0.0% 100.0%   0.0%\n    NA  0.0%  0.0%   0.0% 100.0%\n```\n:::\n:::\n\n\n## Función adicional: `adorn_ns()`\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  filter(nacionalidad == \"ARG\") %>%\n  tabyl(goles,partidos) %>%\n  adorn_percentages() %>%\n  adorn_pct_formatting() %>%\n  adorn_ns()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n goles        15        18         20        NA_\n    12 33.3% (1) 33.3% (1)  33.3% (1)   0.0% (0)\n    30  0.0% (0)  0.0% (0) 100.0% (1)   0.0% (0)\n    NA  0.0% (0)  0.0% (0)   0.0% (0) 100.0% (1)\n```\n:::\n:::\n\n\n## función bonus `top_levels()`\n\n-   Sirve para obtener la tabla de frecuencias de un vector de factores\n-   Separa los factores en 3 grupos *bajo*, *medio*, *alto*\n-   La función `top_levels()` te devuelve un data.frame\n\n## \n\n\n::: {.cell}\n\n```{.r .cell-code}\nfac <- as.factor(c(\"muy fuerte\",\"muy fuerte\",\"muy fuerte\",\"fuerte\",\"débil\",\"débil\",\"muy débil\",\"muy débil\"))\n```\n:::\n\n\n. . .\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n               fac n percent\n             débil 2   0.250\n fuerte, muy débil 3   0.375\n        muy fuerte 3   0.375\n```\n:::\n:::\n\n\n## Janitor Miscellaneous functions\n\n-   `clean_names()` para limpiar y ajustar nombres de columnas en data.frames\n-   `compare_df_cols()` para comparar si columnas de dos data.frames son iguales\n-   `remove_empty()` para remover celdas vacías en data.frames\n-   otras funciones [aqui](https://sfirke.github.io/janitor/articles/janitor.html)\n\n## \n\n![](imgs/bernie.jpg)\n\n# Tarea\n\n## \n\n![](imgs/homework.jpg)\n\n## Contexto\n\nUn colega está investigando el efecto de la construcción de una represa en el rio Madeira, Amazonía, sobre la comunidad de hormigas. Hay un efecto fuerte de cambio de la comunidad en el \"antes\" y \"después\" de la construcción (medido con el indice Bray-Curtis). Sin embargo, las variables climatológicas y edáficas no han cambiado, por lo que este colega tiene la hipótesis del cambio de nível freático.\n\nPara cada parcela se calculó 3 valores (tipo 2, 3 y 4) de un descriptor de la hidrología local llamado [HAND](https://www.sciencedirect.com/science/article/abs/pii/S003442570800120X). Los valores fueron calculados para antes y después de la inundación.\n\n## \n\nEl colega necesita saber cuál de los 3 valores podrá ser usado como variable descriptora en su estudio. En la figura abajo se ve el efecto de la inundación en el Rio Madeira sobre un modelo digital de elevación\n\n![](imgs/comp4.png) {fig-align=\"center\",fig-size=\"80%\"}\n\n## Instrucciones\n\n-   Importar el conjunto de datos: \"ej_visualizacion_datos.xlsx\". Usar la función `rio::import()`\n-   Es necesario estandarizar los nombres de las columnas? Caso positivo, usar la función `janitor::clean_names()`\n\n## Usando única función vista en clase, contestar a las preguntas:\n\n-   ¿Cuál de las columnas tiene mayor promedio?\n-   Cuál tiene el mayor valor\n-   ¿Cuál tiene una distribución que más se acerca a una \"normal\"?\n-   ¿Cuántos grupos de parcelas hay?\n\n## Códigos para contestar a las preguntas\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(rio)\nlibrary(skimr)\n\ntopo = import(\"dados/ej_visualizacion_datos.xlsx\")\n\ntopo = topo %>%\n  janitor::clean_names()\n\ntopo %>%\n  skimr::skim()\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}